// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// outerProdRow
List outerProdRow(arma::mat X);
RcppExport SEXP _ECCCM_outerProdRow(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(outerProdRow(X));
    return rcpp_result_gen;
END_RCPP
}
// findCovVar
arma::mat findCovVar(List list_cov_mat, arma::mat cov_mat);
RcppExport SEXP _ECCCM_findCovVar(SEXP list_cov_matSEXP, SEXP cov_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type list_cov_mat(list_cov_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    rcpp_result_gen = Rcpp::wrap(findCovVar(list_cov_mat, cov_mat));
    return rcpp_result_gen;
END_RCPP
}
// findCovTwoInd
arma::mat findCovTwoInd(List cov_list, int ind_a, int ind_b);
RcppExport SEXP _ECCCM_findCovTwoInd(SEXP cov_listSEXP, SEXP ind_aSEXP, SEXP ind_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type cov_list(cov_listSEXP);
    Rcpp::traits::input_parameter< int >::type ind_a(ind_aSEXP);
    Rcpp::traits::input_parameter< int >::type ind_b(ind_bSEXP);
    rcpp_result_gen = Rcpp::wrap(findCovTwoInd(cov_list, ind_a, ind_b));
    return rcpp_result_gen;
END_RCPP
}
// findCovTwoIndV2
arma::mat findCovTwoIndV2(arma::cube outer_cube, arma::mat cov_mat, int ind_a, int ind_b);
RcppExport SEXP _ECCCM_findCovTwoIndV2(SEXP outer_cubeSEXP, SEXP cov_matSEXP, SEXP ind_aSEXP, SEXP ind_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type outer_cube(outer_cubeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    Rcpp::traits::input_parameter< int >::type ind_a(ind_aSEXP);
    Rcpp::traits::input_parameter< int >::type ind_b(ind_bSEXP);
    rcpp_result_gen = Rcpp::wrap(findCovTwoIndV2(outer_cube, cov_mat, ind_a, ind_b));
    return rcpp_result_gen;
END_RCPP
}
// quadForm
double quadForm(arma::vec x, arma::mat S);
RcppExport SEXP _ECCCM_quadForm(SEXP xSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(quadForm(x, S));
    return rcpp_result_gen;
END_RCPP
}
// powVec
arma::vec powVec(arma::vec x, double power_of);
RcppExport SEXP _ECCCM_powVec(SEXP xSEXP, SEXP power_ofSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type power_of(power_ofSEXP);
    rcpp_result_gen = Rcpp::wrap(powVec(x, power_of));
    return rcpp_result_gen;
END_RCPP
}
// addVarGauss
arma::mat addVarGauss(arma::mat cov_mat, arma::mat omega, arma::vec beta, int n_r, int n_o);
RcppExport SEXP _ECCCM_addVarGauss(SEXP cov_matSEXP, SEXP omegaSEXP, SEXP betaSEXP, SEXP n_rSEXP, SEXP n_oSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n_r(n_rSEXP);
    Rcpp::traits::input_parameter< int >::type n_o(n_oSEXP);
    rcpp_result_gen = Rcpp::wrap(addVarGauss(cov_mat, omega, beta, n_r, n_o));
    return rcpp_result_gen;
END_RCPP
}
// createE
arma::sp_mat createE(int dim_size, int i, int j);
RcppExport SEXP _ECCCM_createE(SEXP dim_sizeSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dim_size(dim_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(createE(dim_size, i, j));
    return rcpp_result_gen;
END_RCPP
}
// findPij
arma::sp_mat findPij(arma::mat est_cor_mat, int first_ind, int second_ind);
RcppExport SEXP _ECCCM_findPij(SEXP est_cor_matSEXP, SEXP first_indSEXP, SEXP second_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type est_cor_mat(est_cor_matSEXP);
    Rcpp::traits::input_parameter< int >::type first_ind(first_indSEXP);
    Rcpp::traits::input_parameter< int >::type second_ind(second_indSEXP);
    rcpp_result_gen = Rcpp::wrap(findPij(est_cor_mat, first_ind, second_ind));
    return rcpp_result_gen;
END_RCPP
}
// findPLambdaij
arma::sp_mat findPLambdaij(arma::mat est_cor_mat, arma::sp_mat inv_d_sig, int first_ind, int second_ind);
RcppExport SEXP _ECCCM_findPLambdaij(SEXP est_cor_matSEXP, SEXP inv_d_sigSEXP, SEXP first_indSEXP, SEXP second_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type est_cor_mat(est_cor_matSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type inv_d_sig(inv_d_sigSEXP);
    Rcpp::traits::input_parameter< int >::type first_ind(first_indSEXP);
    Rcpp::traits::input_parameter< int >::type second_ind(second_indSEXP);
    rcpp_result_gen = Rcpp::wrap(findPLambdaij(est_cor_mat, inv_d_sig, first_ind, second_ind));
    return rcpp_result_gen;
END_RCPP
}
// findLambdaPij
arma::sp_mat findLambdaPij(arma::mat est_cor_mat, arma::sp_mat inv_d_sig, int first_ind, int second_ind);
RcppExport SEXP _ECCCM_findLambdaPij(SEXP est_cor_matSEXP, SEXP inv_d_sigSEXP, SEXP first_indSEXP, SEXP second_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type est_cor_mat(est_cor_matSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type inv_d_sig(inv_d_sigSEXP);
    Rcpp::traits::input_parameter< int >::type first_ind(first_indSEXP);
    Rcpp::traits::input_parameter< int >::type second_ind(second_indSEXP);
    rcpp_result_gen = Rcpp::wrap(findLambdaPij(est_cor_mat, inv_d_sig, first_ind, second_ind));
    return rcpp_result_gen;
END_RCPP
}
// findRij
arma::mat findRij(arma::mat est_cor_mat, arma::sp_mat inv_d_sig, List cov_list, int i, int j);
RcppExport SEXP _ECCCM_findRij(SEXP est_cor_matSEXP, SEXP inv_d_sigSEXP, SEXP cov_listSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type est_cor_mat(est_cor_matSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type inv_d_sig(inv_d_sigSEXP);
    Rcpp::traits::input_parameter< List >::type cov_list(cov_listSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(findRij(est_cor_mat, inv_d_sig, cov_list, i, j));
    return rcpp_result_gen;
END_RCPP
}
// findVarGaussCovInd
arma::mat findVarGaussCovInd(arma::mat cov_mat, int i, int j);
RcppExport SEXP _ECCCM_findVarGaussCovInd(SEXP cov_matSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(findVarGaussCovInd(cov_mat, i, j));
    return rcpp_result_gen;
END_RCPP
}
// findRijGauss
arma::mat findRijGauss(arma::mat est_cor_mat, arma::sp_mat inv_d_sig, arma::mat est_cov_mat, int i, int j);
RcppExport SEXP _ECCCM_findRijGauss(SEXP est_cor_matSEXP, SEXP inv_d_sigSEXP, SEXP est_cov_matSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type est_cor_mat(est_cor_matSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type inv_d_sig(inv_d_sigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type est_cov_mat(est_cov_matSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(findRijGauss(est_cor_mat, inv_d_sig, est_cov_mat, i, j));
    return rcpp_result_gen;
END_RCPP
}
// findRijDiagonal
arma::mat findRijDiagonal(arma::mat est_cor_mat, arma::sp_mat inv_d_sig, List cov_list, int i, int j);
RcppExport SEXP _ECCCM_findRijDiagonal(SEXP est_cor_matSEXP, SEXP inv_d_sigSEXP, SEXP cov_listSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type est_cor_mat(est_cor_matSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type inv_d_sig(inv_d_sigSEXP);
    Rcpp::traits::input_parameter< List >::type cov_list(cov_listSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(findRijDiagonal(est_cor_mat, inv_d_sig, cov_list, i, j));
    return rcpp_result_gen;
END_RCPP
}
// covToCor
arma::mat covToCor(arma::mat cov_mat);
RcppExport SEXP _ECCCM_covToCor(SEXP cov_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    rcpp_result_gen = Rcpp::wrap(covToCor(cov_mat));
    return rcpp_result_gen;
END_RCPP
}
// diagSqrtSparse
arma::sp_mat diagSqrtSparse(arma::mat temp_mat);
RcppExport SEXP _ECCCM_diagSqrtSparse(SEXP temp_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type temp_mat(temp_matSEXP);
    rcpp_result_gen = Rcpp::wrap(diagSqrtSparse(temp_mat));
    return rcpp_result_gen;
END_RCPP
}
// varBeta
arma::mat varBeta(arma::vec beta, arma::mat cov_mat, List cov_list, arma::vec ind);
RcppExport SEXP _ECCCM_varBeta(SEXP betaSEXP, SEXP cov_matSEXP, SEXP cov_listSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    Rcpp::traits::input_parameter< List >::type cov_list(cov_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(varBeta(beta, cov_mat, cov_list, ind));
    return rcpp_result_gen;
END_RCPP
}
// varBetaGauss
arma::mat varBetaGauss(arma::vec beta, arma::mat cov_mat, arma::vec ind);
RcppExport SEXP _ECCCM_varBetaGauss(SEXP betaSEXP, SEXP cov_matSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(varBetaGauss(beta, cov_mat, ind));
    return rcpp_result_gen;
END_RCPP
}
// varBetaDiag
arma::mat varBetaDiag(arma::vec beta, arma::mat cov_mat, List cov_list, arma::vec ind, int nr);
RcppExport SEXP _ECCCM_varBetaDiag(SEXP betaSEXP, SEXP cov_matSEXP, SEXP cov_listSEXP, SEXP indSEXP, SEXP nrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    Rcpp::traits::input_parameter< List >::type cov_list(cov_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ind(indSEXP);
    Rcpp::traits::input_parameter< int >::type nr(nrSEXP);
    rcpp_result_gen = Rcpp::wrap(varBetaDiag(beta, cov_mat, cov_list, ind, nr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ECCCM_outerProdRow", (DL_FUNC) &_ECCCM_outerProdRow, 1},
    {"_ECCCM_findCovVar", (DL_FUNC) &_ECCCM_findCovVar, 2},
    {"_ECCCM_findCovTwoInd", (DL_FUNC) &_ECCCM_findCovTwoInd, 3},
    {"_ECCCM_findCovTwoIndV2", (DL_FUNC) &_ECCCM_findCovTwoIndV2, 4},
    {"_ECCCM_quadForm", (DL_FUNC) &_ECCCM_quadForm, 2},
    {"_ECCCM_powVec", (DL_FUNC) &_ECCCM_powVec, 2},
    {"_ECCCM_addVarGauss", (DL_FUNC) &_ECCCM_addVarGauss, 5},
    {"_ECCCM_createE", (DL_FUNC) &_ECCCM_createE, 3},
    {"_ECCCM_findPij", (DL_FUNC) &_ECCCM_findPij, 3},
    {"_ECCCM_findPLambdaij", (DL_FUNC) &_ECCCM_findPLambdaij, 4},
    {"_ECCCM_findLambdaPij", (DL_FUNC) &_ECCCM_findLambdaPij, 4},
    {"_ECCCM_findRij", (DL_FUNC) &_ECCCM_findRij, 5},
    {"_ECCCM_findVarGaussCovInd", (DL_FUNC) &_ECCCM_findVarGaussCovInd, 3},
    {"_ECCCM_findRijGauss", (DL_FUNC) &_ECCCM_findRijGauss, 5},
    {"_ECCCM_findRijDiagonal", (DL_FUNC) &_ECCCM_findRijDiagonal, 5},
    {"_ECCCM_covToCor", (DL_FUNC) &_ECCCM_covToCor, 1},
    {"_ECCCM_diagSqrtSparse", (DL_FUNC) &_ECCCM_diagSqrtSparse, 1},
    {"_ECCCM_varBeta", (DL_FUNC) &_ECCCM_varBeta, 4},
    {"_ECCCM_varBetaGauss", (DL_FUNC) &_ECCCM_varBetaGauss, 3},
    {"_ECCCM_varBetaDiag", (DL_FUNC) &_ECCCM_varBetaDiag, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ECCCM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

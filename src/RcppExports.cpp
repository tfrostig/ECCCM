// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// outerProdRow
List outerProdRow(arma::mat X);
RcppExport SEXP _ECCCM_outerProdRow(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(outerProdRow(X));
    return rcpp_result_gen;
END_RCPP
}
// covRows
arma::mat covRows(List cov_mats, int m, int k);
RcppExport SEXP _ECCCM_covRows(SEXP cov_matsSEXP, SEXP mSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type cov_mats(cov_matsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(covRows(cov_mats, m, k));
    return rcpp_result_gen;
END_RCPP
}
// findCovVar
arma::mat findCovVar(List list_cov_mat, arma::mat cov_mat);
RcppExport SEXP _ECCCM_findCovVar(SEXP list_cov_matSEXP, SEXP cov_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type list_cov_mat(list_cov_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    rcpp_result_gen = Rcpp::wrap(findCovVar(list_cov_mat, cov_mat));
    return rcpp_result_gen;
END_RCPP
}
// findCovBayes
arma::mat findCovBayes(List list_cov_mat, arma::mat cov_mat, arma::mat delta_gamma);
RcppExport SEXP _ECCCM_findCovBayes(SEXP list_cov_matSEXP, SEXP cov_matSEXP, SEXP delta_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type list_cov_mat(list_cov_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta_gamma(delta_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(findCovBayes(list_cov_mat, cov_mat, delta_gamma));
    return rcpp_result_gen;
END_RCPP
}
// findCovByInd
arma::mat findCovByInd(arma::mat x, int ind);
RcppExport SEXP _ECCCM_findCovByInd(SEXP xSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(findCovByInd(x, ind));
    return rcpp_result_gen;
END_RCPP
}
// findCovTwoInd
arma::mat findCovTwoInd(List cov_scaled_list, int ind_a, int ind_b);
RcppExport SEXP _ECCCM_findCovTwoInd(SEXP cov_scaled_listSEXP, SEXP ind_aSEXP, SEXP ind_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type cov_scaled_list(cov_scaled_listSEXP);
    Rcpp::traits::input_parameter< int >::type ind_a(ind_aSEXP);
    Rcpp::traits::input_parameter< int >::type ind_b(ind_bSEXP);
    rcpp_result_gen = Rcpp::wrap(findCovTwoInd(cov_scaled_list, ind_a, ind_b));
    return rcpp_result_gen;
END_RCPP
}
// varFirstTerm
arma::mat varFirstTerm(arma::vec beta, arma::mat omega, List cov_list_scaled, arma::vec ind);
RcppExport SEXP _ECCCM_varFirstTerm(SEXP betaSEXP, SEXP omegaSEXP, SEXP cov_list_scaledSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< List >::type cov_list_scaled(cov_list_scaledSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(varFirstTerm(beta, omega, cov_list_scaled, ind));
    return rcpp_result_gen;
END_RCPP
}
// quadForm
double quadForm(arma::vec x, arma::mat S);
RcppExport SEXP _ECCCM_quadForm(SEXP xSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(quadForm(x, S));
    return rcpp_result_gen;
END_RCPP
}
// addVarGauss
arma::mat addVarGauss(arma::mat cov_mat, arma::mat omega, arma::vec beta, int n_r, int n_o);
RcppExport SEXP _ECCCM_addVarGauss(SEXP cov_matSEXP, SEXP omegaSEXP, SEXP betaSEXP, SEXP n_rSEXP, SEXP n_oSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cov_mat(cov_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n_r(n_rSEXP);
    Rcpp::traits::input_parameter< int >::type n_o(n_oSEXP);
    rcpp_result_gen = Rcpp::wrap(addVarGauss(cov_mat, omega, beta, n_r, n_o));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ECCCM_outerProdRow", (DL_FUNC) &_ECCCM_outerProdRow, 1},
    {"_ECCCM_covRows", (DL_FUNC) &_ECCCM_covRows, 3},
    {"_ECCCM_findCovVar", (DL_FUNC) &_ECCCM_findCovVar, 2},
    {"_ECCCM_findCovBayes", (DL_FUNC) &_ECCCM_findCovBayes, 3},
    {"_ECCCM_findCovByInd", (DL_FUNC) &_ECCCM_findCovByInd, 2},
    {"_ECCCM_findCovTwoInd", (DL_FUNC) &_ECCCM_findCovTwoInd, 3},
    {"_ECCCM_varFirstTerm", (DL_FUNC) &_ECCCM_varFirstTerm, 4},
    {"_ECCCM_quadForm", (DL_FUNC) &_ECCCM_quadForm, 2},
    {"_ECCCM_addVarGauss", (DL_FUNC) &_ECCCM_addVarGauss, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ECCCM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
